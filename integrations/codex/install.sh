#!/bin/bash

# Felix MCP Server - Codex Integration Installer
# This script installs the Felix MCP server into your Codex configuration

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

CODEX_CONFIG_DIR="$HOME/.codex"
CODEX_CONFIG_FILE="$CODEX_CONFIG_DIR/config.toml"
BACKUP_DIR="$CODEX_CONFIG_DIR/backups"

echo -e "${CYAN}╔════════════════════════════════════════════════════════════╗${NC}"
echo -e "${CYAN}║        Felix MCP Server - Codex Integration Setup          ║${NC}"
echo -e "${CYAN}╚════════════════════════════════════════════════════════════╝${NC}"
echo ""

# Function to print status
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check if Codex is installed (optional - will still configure)
if ! command -v codex &> /dev/null; then
    print_warning "Codex CLI not found in PATH"
    print_status "Will configure anyway - install Codex later from: https://github.com/openai/codex"
    echo -e "${YELLOW}Continue anyway? (Y/n)${NC}"
    read -r response
    if [[ "$response" =~ ^[Nn]$ ]]; then
        exit 0
    fi
else
    print_success "Codex CLI found"
fi

# Create .codex directory if it doesn't exist
if [ ! -d "$CODEX_CONFIG_DIR" ]; then
    print_status "Creating Codex configuration directory at $CODEX_CONFIG_DIR"
    mkdir -p "$CODEX_CONFIG_DIR"
fi

# Create backup directory
mkdir -p "$BACKUP_DIR"

# Backup existing config if it exists
if [ -f "$CODEX_CONFIG_FILE" ]; then
    BACKUP_FILE="$BACKUP_DIR/config.toml.$(date +%Y%m%d_%H%M%S)"
    print_status "Backing up existing config to $BACKUP_FILE"
    cp "$CODEX_CONFIG_FILE" "$BACKUP_FILE"
fi

# Create config.toml if it doesn't exist
if [ ! -f "$CODEX_CONFIG_FILE" ]; then
    print_status "Creating new config.toml..."
    cat > "$CODEX_CONFIG_FILE" <<'EOF'
# Codex Configuration
# Generated by Felix installer

EOF
fi

# Check if Felix MCP server is already configured
if grep -q "\[mcp_servers\.Felix\]" "$CODEX_CONFIG_FILE" 2>/dev/null; then
    print_warning "Felix MCP server is already configured in config.toml"
    echo -e "${YELLOW}Do you want to replace the existing configuration? (y/N)${NC}"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        print_status "Keeping existing configuration"
        exit 0
    fi
    # Remove existing Felix configuration using awk
    print_status "Removing existing Felix configuration..."
    awk '
        /^\[mcp_servers\.Felix\]/ { skip=1; next }
        skip && /^\[/ { skip=0 }
        skip { next }
        !skip { print }
    ' "$CODEX_CONFIG_FILE" > "$CODEX_CONFIG_FILE.tmp"
    mv "$CODEX_CONFIG_FILE.tmp" "$CODEX_CONFIG_FILE"
fi

# Prompt for configuration
echo ""
echo -e "${CYAN}═══════════════════════════════════════════════════════════════${NC}"
echo -e "${CYAN}Configuration${NC}"
echo -e "${CYAN}═══════════════════════════════════════════════════════════════${NC}"
echo ""

# Get the directory where this script is located (integrations/codex)
INTEGRATIONS_DIR="$(dirname "$SCRIPT_DIR")"
FELIX_ROOT="$(dirname "$INTEGRATIONS_DIR")"
STDIO_PATH="$FELIX_ROOT/apps/server/dist/stdio.js"

# Verify stdio.js exists
if [ ! -f "$STDIO_PATH" ]; then
    print_error "stdio.js not found at $STDIO_PATH"
    print_status "Make sure you've built the server: npm run build"
    exit 1
fi

print_status "Found stdio.js at: $STDIO_PATH"

# Add Felix MCP server configuration
print_status "Adding Felix MCP server configuration..."
cat >> "$CODEX_CONFIG_FILE" <<EOF

# Felix MCP Server
# Code intelligence and task management server
[mcp_servers.Felix]
type = "stdio"
command = "/usr/bin/env"
args = ["node", "$STDIO_PATH"]
path = "/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"

[mcp_servers.Felix.env]
NODE_ENV = "production"

EOF

print_success "Felix MCP server configured in $CODEX_CONFIG_FILE"

# Final instructions
echo ""
echo -e "${GREEN}═══════════════════════════════════════════════════════════════${NC}"
echo -e "${GREEN}Installation Complete!${NC}"
echo -e "${GREEN}═══════════════════════════════════════════════════════════════${NC}"
echo ""
echo -e "${CYAN}Next steps:${NC}"
echo ""
echo "1. Start Codex in your project directory:"
echo -e "   ${YELLOW}cd /path/to/your/project${NC}"
echo -e "   ${YELLOW}codex${NC}"
echo ""
echo "2. Verify Felix MCP is connected:"
echo -e "   ${YELLOW}codex mcp list${NC}"
echo ""
echo "   You should see 'Felix' in the list"
echo ""
echo -e "${CYAN}Available Felix MCP tools:${NC}"
echo "   - mcp__felix__search      - Search code and tasks"
echo "   - mcp__felix__context     - Get code context"
echo "   - mcp__felix__tasks       - Manage tasks and workflows"
echo "   - mcp__felix__notes       - Create documentation"
echo "   - mcp__felix__rules       - Define coding standards"
echo "   - mcp__felix__workflows   - Configure task workflows"
echo ""
echo -e "${CYAN}Configuration saved to:${NC}"
echo "   $CODEX_CONFIG_FILE"
echo ""
echo -e "${GREEN}Happy coding with Felix + Codex! 🚀${NC}"
